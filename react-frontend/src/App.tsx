import React, { useState } from 'react';
import { clsx } from 'clsx';
import { 
  Upload, 
  BarChart3, 
  Database, 
  GitCompare,
  CheckCircle,
  AlertCircle,
  Clock,
  RefreshCw
} from 'lucide-react';

// Components
import { DragDropUploader } from './components/DatasetUpload/DragDropUploader';
import { DatasetPreview } from './components/DatasetUpload/DatasetPreview';
import { ValidationMessages } from './components/DatasetUpload/ValidationMessages';
import { AlignedDataTable } from './components/ComparisonTable/AlignedDataTable';
import { StatisticalSummary } from './components/MetricsComparison/StatisticalSummary';
import { ComparisonCharts } from './components/MetricsComparison/ComparisonCharts';
import { TestResults } from './components/StatisticalTests/TestResults';
import { AutoGeneratedInsights } from './components/InsightsPanel/AutoGeneratedInsights';
import { ReportGenerator } from './components/Export/ReportGenerator';

// Hooks
import { useUpload } from './hooks/useUpload';
import { 
  useDatasets, 
  useCreateComparison, 
  useComparison 
} from './hooks/useComparison';

// Types
import { Comparison, AlignmentResult, StatisticalMetric } from './types/comparison';

type Step = 'upload' | 'compare' | 'results';

function App() {
  const [currentStep, setCurrentStep] = useState<Step>('upload');
  const [selectedComparison, setSelectedComparison] = useState<string>('');
  
  const { 
    files, 
    processFiles, 
    removeFile, 
    updateFileType, 
    uploadFile, 
    clearFiles,
    isUploading 
  } = useUpload();
  
  const { data: datasets = [], error: datasetsError } = useDatasets();
  const createComparisonMutation = useCreateComparison();
  const { data: comparison, isLoading: isLoadingComparison } = useComparison(selectedComparison);

  // Backend connectivity check
  if (datasetsError) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="max-w-md mx-auto text-center p-6 bg-white rounded-lg shadow-sm border border-gray-200">
          <div className="w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4">
            <AlertCircle className="w-8 h-8 text-red-500" />
          </div>
          <h2 className="text-xl font-semibold text-gray-900 mb-2">Backend Connection Failed</h2>
          <p className="text-gray-600 mb-4">
            Unable to connect to the Oedipus backend server. Please ensure the backend is running.
          </p>
          <div className="bg-gray-50 rounded-lg p-4 mb-4">
            <p className="text-sm font-medium text-gray-700 mb-2">To start the backend:</p>
            <code className="text-sm bg-gray-100 px-2 py-1 rounded">python scripts/start_backend.py</code>
          </div>
          <button
            onClick={() => window.location.reload()}
            className="px-4 py-2 bg-primary-500 text-white rounded-lg hover:bg-primary-600 transition-colors"
          >
            <RefreshCw className="w-4 h-4 inline mr-2" />
            Retry Connection
          </button>
        </div>
      </div>
    );
  }

  // Extract uploaded datasets for comparison creation
  const uploadedInputDatasets = datasets.slice(-5); // Show recent datasets
  const completedFiles = files.filter(f => f.status === 'completed');
  
  // Extract alignment data from comparison
  const alignment: AlignmentResult | null = comparison?.statistical_results?.alignment || null;
  const metrics: StatisticalMetric[] = comparison?.statistical_results?.metrics || [];

  const handleCreateComparison = async () => {
    const inputDatasets = datasets.filter(d => 
      files.some(f => f.type === 'input' && f.status === 'completed')
    );
    const outputDatasets = datasets.filter(d => 
      files.some(f => f.type === 'output' && f.status === 'completed')
    );

    if (inputDatasets.length === 0 || outputDatasets.length < 2) {
      alert('Please upload at least one input dataset and two output datasets');
      return;
    }

    try {
      const result = await createComparisonMutation.mutateAsync({
        name: `Comparison ${new Date().toLocaleString()}`,
        dataset_id: inputDatasets[0].id,
        output_dataset_ids: outputDatasets.slice(0, 2).map(d => d.id), // Compare first two outputs
        alignment_key: 'input_id'
      });
      
      setSelectedComparison(result.id);
      setCurrentStep('results');
    } catch (error) {
      console.error('Failed to create comparison:', error);
      alert('Failed to create comparison. Please try again.');
    }
  };

  const getStepStatus = (step: Step) => {
    if (currentStep === step) return 'current';
    if (step === 'upload') return 'completed';
    if (step === 'compare' && completedFiles.length > 0) return 'completed';
    if (step === 'results' && selectedComparison) return 'completed';
    return 'pending';
  };

  const renderStepIndicator = () => (
    <div className="flex items-center justify-center mb-8">
      <div className="flex items-center space-x-4">
        {[
          { key: 'upload', label: 'Upload Data', icon: Upload },
          { key: 'compare', label: 'Create Comparison', icon: GitCompare },
          { key: 'results', label: 'View Results', icon: BarChart3 },
        ].map(({ key, label, icon: Icon }, index) => (
          <React.Fragment key={key}>
            <div className="flex items-center space-x-2">
              <div className={clsx(
                'w-10 h-10 rounded-full flex items-center justify-center border-2',
                getStepStatus(key as Step) === 'completed' && 'bg-green-500 border-green-500 text-white',
                getStepStatus(key as Step) === 'current' && 'bg-blue-500 border-blue-500 text-white',
                getStepStatus(key as Step) === 'pending' && 'bg-gray-100 border-gray-300 text-gray-500'
              )}>
                {getStepStatus(key as Step) === 'completed' ? (
                  <CheckCircle className="w-5 h-5" />
                ) : (
                  <Icon className="w-5 h-5" />
                )}
              </div>
              <span className={clsx(
                'text-sm font-medium',
                getStepStatus(key as Step) === 'current' && 'text-blue-600',
                getStepStatus(key as Step) === 'completed' && 'text-green-600',
                getStepStatus(key as Step) === 'pending' && 'text-gray-500'
              )}>
                {label}
              </span>
            </div>
            {index < 2 && (
              <div className={clsx(
                'w-8 h-0.5',
                index === 0 && completedFiles.length > 0 && 'bg-green-500',
                index === 1 && selectedComparison && 'bg-green-500',
                'bg-gray-300'
              )} />
            )}
          </React.Fragment>
        ))}
      </div>
    </div>
  );

  const renderUploadStep = () => (
    <div className="space-y-6">
      <div className="text-center">
        <h2 className="text-2xl font-bold text-gray-900 mb-2">Upload Your Datasets</h2>
        <p className="text-gray-600">
          Upload input datasets and multiple output datasets to compare model performance
        </p>
      </div>

      <DragDropUploader 
        onFilesAdded={processFiles}
        disabled={isUploading}
        className="max-w-2xl mx-auto"
      />

      {files.length > 0 && (
        <div className="max-w-4xl mx-auto">
          <div className="flex items-center justify-between mb-4">
            <h3 className="text-lg font-semibold">File Preview</h3>
            <button
              onClick={clearFiles}
              className="text-sm text-gray-500 hover:text-red-600"
              disabled={isUploading}
            >
              Clear All
            </button>
          </div>
          
          <div className="grid gap-4">
            {files.map(file => (
              <DatasetPreview
                key={file.id}
                file={file}
                onRemove={removeFile}
                onTypeChange={updateFileType}
                onUpload={uploadFile}
                inputDatasets={uploadedInputDatasets}
                disabled={isUploading}
              />
            ))}
          </div>

          {completedFiles.length >= 3 && (
            <div className="mt-6 text-center">
              <button
                onClick={() => setCurrentStep('compare')}
                className="px-6 py-2 bg-primary-500 text-white rounded-lg hover:bg-primary-600 transition-colors"
              >
                Proceed to Comparison
              </button>
            </div>
          )}
        </div>
      )}
    </div>
  );

  const renderCompareStep = () => (
    <div className="max-w-2xl mx-auto space-y-6">
      <div className="text-center">
        <h2 className="text-2xl font-bold text-gray-900 mb-2">Create Comparison</h2>
        <p className="text-gray-600">
          Set up your comparative analysis between different model outputs
        </p>
      </div>

      <div className="bg-white border border-gray-200 rounded-lg p-6">
        <div className="space-y-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Available Datasets
            </label>
            <div className="space-y-2">
              {datasets.slice(-5).map(dataset => (
                <div key={dataset.id} className="flex items-center gap-3 p-3 border rounded">
                  <Database className="w-5 h-5 text-blue-500" />
                  <div>
                    <div className="font-medium">{dataset.name}</div>
                    <div className="text-sm text-gray-500">
                      {dataset.input_count} inputs â€¢ Created {new Date(dataset.created_at).toLocaleDateString()}
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>

          <div className="pt-4">
            <button
              onClick={handleCreateComparison}
              disabled={createComparisonMutation.isPending || datasets.length < 3}
              className={clsx(
                'w-full px-4 py-2 rounded-lg font-medium transition-colors',
                'bg-primary-500 text-white hover:bg-primary-600',
                'disabled:opacity-50 disabled:cursor-not-allowed'
              )}
            >
              {createComparisonMutation.isPending ? (
                <>
                  <RefreshCw className="w-4 h-4 inline mr-2 animate-spin" />
                  Creating Comparison...
                </>
              ) : (
                'Create Comparison'
              )}
            </button>
          </div>
        </div>
      </div>
    </div>
  );

  const renderResultsStep = () => {
    if (isLoadingComparison) {
      return (
        <div className="text-center py-12">
          <RefreshCw className="w-8 h-8 animate-spin mx-auto text-blue-500 mb-4" />
          <p className="text-gray-600">Loading comparison results...</p>
        </div>
      );
    }

    if (!comparison) {
      return (
        <div className="text-center py-12">
          <AlertCircle className="w-8 h-8 mx-auto text-gray-400 mb-4" />
          <p className="text-gray-600">No comparison data available</p>
        </div>
      );
    }

    if (comparison.status === 'pending' || comparison.status === 'running') {
      return (
        <div className="text-center py-12">
          <Clock className="w-8 h-8 animate-pulse mx-auto text-blue-500 mb-4" />
          <p className="text-gray-600">
            Analysis in progress... Status: {comparison.status}
          </p>
        </div>
      );
    }

    const alignmentData = alignment?.alignedRows || [];
    const datasetNames = alignmentData.length > 0 
      ? Object.keys(alignmentData[0].outputs) 
      : [];

    return (
      <div className="space-y-8">
        <div className="text-center">
          <h2 className="text-2xl font-bold text-gray-900 mb-2">Comparison Results</h2>
          <p className="text-gray-600">
            Detailed analysis of your model outputs with statistical insights
          </p>
        </div>

        {/* Coverage Stats */}
        {alignment?.coverageStats && (
          <div className="bg-blue-50 border border-blue-200 rounded-lg p-6">
            <h3 className="font-semibold text-blue-900 mb-4">Data Alignment Summary</h3>
            <div className="grid grid-cols-3 gap-4">
              <div className="text-center">
                <div className="text-2xl font-bold text-blue-700">
                  {alignment.coverageStats.totalInputs}
                </div>
                <div className="text-blue-600">Total Inputs</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-blue-700">
                  {alignment.coverageStats.matchedInputs}
                </div>
                <div className="text-blue-600">Matched</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-blue-700">
                  {alignment.coverageStats.coveragePercentage.toFixed(1)}%
                </div>
                <div className="text-blue-600">Coverage</div>
              </div>
            </div>
          </div>
        )}

        {/* Insights Panel */}
        <AutoGeneratedInsights 
          metrics={metrics} 
          alignment={alignment}
          datasetNames={datasetNames}
        />

        {/* Statistical Test Results */}
        <TestResults metrics={metrics} significanceLevel={0.05} />

        {/* Statistical Summary */}
        <StatisticalSummary metrics={metrics} />

        {/* Charts */}
        <ComparisonCharts metrics={metrics} />

        {/* Data Table */}
        {alignmentData.length > 0 && (
          <div>
            <h3 className="text-lg font-semibold mb-4">Aligned Data Comparison</h3>
            <AlignedDataTable 
              rows={alignmentData} 
              datasetNames={datasetNames}
            />
          </div>
        )}

        {/* Export Options */}
        <div>
          <h3 className="text-lg font-semibold mb-4">Export & Share</h3>
          <ReportGenerator 
            comparison={comparison}
            metrics={metrics}
            alignment={alignment}
          />
        </div>

        {/* Actions */}
        <div className="flex justify-center gap-4">
          <button
            onClick={() => {
              setCurrentStep('upload');
              setSelectedComparison('');
              clearFiles();
            }}
            className="px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50"
          >
            New Comparison
          </button>
        </div>
      </div>
    );
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white border-b border-gray-200">
        <div className="max-w-7xl mx-auto px-4 py-6">
          <div className="flex items-center gap-3">
            <div className="w-10 h-10 bg-primary-500 rounded-lg flex items-center justify-center">
              <BarChart3 className="w-6 h-6 text-white" />
            </div>
            <div>
              <h1 className="text-2xl font-bold text-gray-900">Oedipus</h1>
              <p className="text-gray-600">Comparative Analysis Platform</p>
            </div>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className="max-w-7xl mx-auto px-4 py-8">
        {renderStepIndicator()}
        
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-8">
          {currentStep === 'upload' && renderUploadStep()}
          {currentStep === 'compare' && renderCompareStep()}
          {currentStep === 'results' && renderResultsStep()}
        </div>
      </main>
    </div>
  );
}

export default App;