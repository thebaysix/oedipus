import React from 'react';
import { clsx } from 'clsx';
import { Lightbulb, TrendingUp, TrendingDown, AlertTriangle, CheckCircle, Target, Zap } from 'lucide-react';
import { StatisticalMetric, AlignmentResult } from '../../types/comparison';

interface AutoGeneratedInsightsProps {
  metrics: StatisticalMetric[];
  alignment: AlignmentResult | null;
  datasetNames: string[];
  className?: string;
}

interface Insight {
  type: 'performance' | 'quality' | 'consistency' | 'coverage' | 'recommendation';
  title: string;
  description: string;
  impact: 'high' | 'medium' | 'low';
  icon: React.ComponentType<{ className?: string }>;
  metrics?: string[];
}

export const AutoGeneratedInsights: React.FC<AutoGeneratedInsightsProps> = ({
  metrics,
  alignment,
  datasetNames,
  className
}) => {
  const generateInsights = (): Insight[] => {
    const insights: Insight[] = [];

    // Coverage insights
    if (alignment?.coverageStats) {
      const coverage = alignment.coverageStats.coveragePercentage;
      if (coverage < 80) {
        insights.push({
          type: 'coverage',
          title: 'Low Data Coverage Detected',
          description: `Only ${coverage.toFixed(1)}% of inputs have matching outputs across all datasets. This may limit the reliability of comparative analysis.`,
          impact: coverage < 50 ? 'high' : 'medium',
          icon: AlertTriangle,
          metrics: ['alignment_coverage']
        });
      } else if (coverage > 95) {
        insights.push({
          type: 'coverage',
          title: 'Excellent Data Alignment',
          description: `${coverage.toFixed(1)}% coverage achieved. High-confidence comparative analysis possible.`,
          impact: 'low',
          icon: CheckCircle,
          metrics: ['alignment_coverage']
        });
      }
    }

    // Performance insights from metrics
    const significantMetrics = metrics.filter(m => m.statistical_significance < 0.05);
    const largeEffectMetrics = metrics.filter(m => Math.abs(m.effect_size) >= 0.8);

    if (largeEffectMetrics.length > 0) {
      const bestDataset = largeEffectMetrics[0].dataset_a_value > largeEffectMetrics[0].dataset_b_value ? 'A' : 'B';
      insights.push({
        type: 'performance',
        title: `Clear Performance Winner: Dataset ${bestDataset}`,
        description: `Dataset ${bestDataset} shows superior performance in ${largeEffectMetrics.length} key metric${largeEffectMetrics.length > 1 ? 's' : ''}. Consider this for production deployment.`,
        impact: 'high',
        icon: Target,
        metrics: largeEffectMetrics.map(m => m.name)
      });
    }

    // Quality consistency insights
    const entropyMetrics = metrics.filter(m => m.name.includes('entropy'));
    if (entropyMetrics.length > 0) {
      const avgEntropy = entropyMetrics.reduce((sum, m) => sum + Math.abs(m.dataset_a_value - m.dataset_b_value), 0) / entropyMetrics.length;
      if (avgEntropy > 1.0) {
        insights.push({
          type: 'quality',
          title: 'Significant Entropy Differences',
          description: `Large differences in output entropy detected (avg: ${avgEntropy.toFixed(2)}). This suggests different levels of output diversity between models.`,
          impact: 'medium',
          icon: TrendingUp,
          metrics: entropyMetrics.map(m => m.name)
        });
      }
    }

    // Length consistency insights
    const lengthMetrics = metrics.filter(m => m.name.includes('length') || m.name.includes('token'));
    if (lengthMetrics.length > 0) {
      const significantLengthDiffs = lengthMetrics.filter(m => m.statistical_significance < 0.05);
      if (significantLengthDiffs.length > 0) {
        const longerDataset = significantLengthDiffs[0].dataset_a_value > significantLengthDiffs[0].dataset_b_value ? 'A' : 'B';
        insights.push({
          type: 'consistency',
          title: 'Output Length Patterns',
          description: `Dataset ${longerDataset} consistently generates ${longerDataset === 'A' ? 'longer' : 'shorter'} outputs. Consider if this aligns with your requirements.`,
          impact: 'medium',
          icon: TrendingUp,
          metrics: significantLengthDiffs.map(m => m.name)
        });
      }
    }

    // Statistical power insights
    if (significantMetrics.length === 0 && metrics.length > 0) {
      insights.push({
        type: 'recommendation',
        title: 'No Significant Differences Found',
        description: 'Current analysis shows no statistically significant differences. Consider collecting more data or examining different metrics.',
        impact: 'medium',
        icon: Lightbulb,
        metrics: []
      });
    } else if (significantMetrics.length === metrics.length && metrics.length > 3) {
      insights.push({
        type: 'performance',
        title: 'Comprehensive Performance Difference',
        description: 'All measured metrics show significant differences. This indicates clear, consistent performance gaps between models.',
        impact: 'high',
        icon: Zap,
        metrics: significantMetrics.map(m => m.name)
      });
    }

    // Recommendation insights
    if (largeEffectMetrics.length > 0 && alignment?.coverageStats.coveragePercentage > 80) {
      insights.push({
        type: 'recommendation',
        title: 'Ready for Production Decision',
        description: 'High data coverage and clear performance differences detected. You have sufficient evidence to make an informed model selection.',
        impact: 'high',
        icon: CheckCircle,
        metrics: []
      });
    }

    return insights.sort((a, b) => {
      const impactOrder = { high: 3, medium: 2, low: 1 };
      return impactOrder[b.impact] - impactOrder[a.impact];
    });
  };

  const insights = generateInsights();

  if (insights.length === 0) {
    return (
      <div className={clsx('text-center py-8 text-gray-500', className)}>
        <Lightbulb className="w-8 h-8 mx-auto mb-2 opacity-50" />
        <p>No specific insights available yet</p>
        <p className="text-sm">Upload more data or run additional comparisons</p>
      </div>
    );
  }

  const getImpactStyles = (impact: Insight['impact']) => {
    switch (impact) {
      case 'high':
        return 'border-red-200 bg-red-50';
      case 'medium':
        return 'border-orange-200 bg-orange-50';
      case 'low':
        return 'border-blue-200 bg-blue-50';
    }
  };

  const getTypeStyles = (type: Insight['type']) => {
    switch (type) {
      case 'performance':
        return 'text-green-600';
      case 'quality':
        return 'text-blue-600';
      case 'consistency':
        return 'text-purple-600';
      case 'coverage':
        return 'text-orange-600';
      case 'recommendation':
        return 'text-indigo-600';
    }
  };

  return (
    <div className={clsx('space-y-4', className)}>
      <div className="flex items-center gap-2 mb-4">
        <Lightbulb className="w-5 h-5 text-yellow-500" />
        <h3 className="text-lg font-semibold text-gray-900">Auto-Generated Insights</h3>
      </div>

      {insights.map((insight, index) => {
        const Icon = insight.icon;
        return (
          <div
            key={index}
            className={clsx(
              'border rounded-lg p-4',
              getImpactStyles(insight.impact)
            )}
          >
            <div className="flex items-start gap-3">
              <Icon className={clsx('w-5 h-5 mt-0.5', getTypeStyles(insight.type))} />
              <div className="flex-1 min-w-0">
                <div className="flex items-center gap-2 mb-1">
                  <h4 className="font-semibold text-gray-900">{insight.title}</h4>
                  <span className={clsx(
                    'text-xs px-2 py-1 rounded-full font-medium',
                    insight.impact === 'high' ? 'bg-red-100 text-red-700' :
                    insight.impact === 'medium' ? 'bg-orange-100 text-orange-700' :
                    'bg-blue-100 text-blue-700'
                  )}>
                    {insight.impact} impact
                  </span>
                </div>
                <p className="text-sm text-gray-700 mb-2">{insight.description}</p>
                
                {insight.metrics && insight.metrics.length > 0 && (
                  <div className="flex flex-wrap gap-1">
                    {insight.metrics.map(metric => (
                      <span
                        key={metric}
                        className="text-xs px-2 py-1 bg-gray-100 text-gray-600 rounded"
                      >
                        {metric.replace(/_/g, ' ')}
                      </span>
                    ))}
                  </div>
                )}
              </div>
            </div>
          </div>
        );
      })}

      {/* Summary */}
      <div className="bg-gray-50 border border-gray-200 rounded-lg p-4 mt-6">
        <h4 className="font-semibold text-gray-900 mb-2">Summary</h4>
        <div className="grid grid-cols-3 gap-4 text-center text-sm">
          <div>
            <div className="text-xl font-bold text-red-600">
              {insights.filter(i => i.impact === 'high').length}
            </div>
            <div className="text-gray-600">High Impact</div>
          </div>
          <div>
            <div className="text-xl font-bold text-orange-600">
              {insights.filter(i => i.impact === 'medium').length}
            </div>
            <div className="text-gray-600">Medium Impact</div>
          </div>
          <div>
            <div className="text-xl font-bold text-blue-600">
              {insights.filter(i => i.impact === 'low').length}
            </div>
            <div className="text-gray-600">Low Impact</div>
          </div>
        </div>
      </div>
    </div>
  );
};